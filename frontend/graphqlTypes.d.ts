/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLAttack {
  name: string;
  type: string;
  damage: number;
}

export interface GQLPokemon {
  id: string;
  number: number;
  name: string;
  weight: GQLPokemonDimension;
  height: GQLPokemonDimension;
  classification: string;
  types: Array<string>;
  resistant: Array<string>;
  attacks: GQLPokemonAttack;
  weaknesses: Array<string>;
  fleeRate: number;
  maxCP: number;
  evolutions: Array<GQLPokemon>;
  evolutionRequirements?: GQLPokemonEvolutionRequirement;
  maxHP: number;
  image: string;
  sound: string;
  isFavorite: boolean;
}

export interface GQLPokemonConnection {
  limit: number;
  offset: number;
  count: number;
  edges: Array<GQLPokemon>;
}

export interface GQLPokemonsQueryInput {
  limit?: number;
  offset?: number;
  search?: string;
  filter?: GQLPokemonFilterInput;
}

export interface GQLPokemonFilterInput {
  type?: string;
  isFavorite?: boolean;
}

export interface GQLPokemonAttack {
  fast: Array<GQLAttack>;
  special: Array<GQLAttack>;
}

export interface GQLPokemonDimension {
  minimum: string;
  maximum: string;
}

export interface GQLPokemonEvolutionRequirement {
  amount: number;
  name: string;
}

export interface GQLQuery {
  pokemons: GQLPokemonConnection;
  pokemonByName?: GQLPokemon;
  pokemonById?: GQLPokemon;
  pokemonTypes: Array<string>;
}

export interface GQLMutation {
  favoritePokemon?: GQLPokemon;
  unFavoritePokemon?: GQLPokemon;
}

export interface GQLRoot {
  query: GQLQuery;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Attack?: GQLAttackTypeResolver;
  Pokemon?: GQLPokemonTypeResolver;
  PokemonConnection?: GQLPokemonConnectionTypeResolver;
  PokemonAttack?: GQLPokemonAttackTypeResolver;
  PokemonDimension?: GQLPokemonDimensionTypeResolver;
  PokemonEvolutionRequirement?: GQLPokemonEvolutionRequirementTypeResolver;
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Root?: GQLRootTypeResolver;
}
export interface GQLAttackTypeResolver<TParent = any> {
  name?: AttackToNameResolver<TParent>;
  type?: AttackToTypeResolver<TParent>;
  damage?: AttackToDamageResolver<TParent>;
}

export interface AttackToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttackToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttackToDamageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPokemonTypeResolver<TParent = any> {
  id?: PokemonToIdResolver<TParent>;
  number?: PokemonToNumberResolver<TParent>;
  name?: PokemonToNameResolver<TParent>;
  weight?: PokemonToWeightResolver<TParent>;
  height?: PokemonToHeightResolver<TParent>;
  classification?: PokemonToClassificationResolver<TParent>;
  types?: PokemonToTypesResolver<TParent>;
  resistant?: PokemonToResistantResolver<TParent>;
  attacks?: PokemonToAttacksResolver<TParent>;
  weaknesses?: PokemonToWeaknessesResolver<TParent>;
  fleeRate?: PokemonToFleeRateResolver<TParent>;
  maxCP?: PokemonToMaxCPResolver<TParent>;
  evolutions?: PokemonToEvolutionsResolver<TParent>;
  evolutionRequirements?: PokemonToEvolutionRequirementsResolver<TParent>;
  maxHP?: PokemonToMaxHPResolver<TParent>;
  image?: PokemonToImageResolver<TParent>;
  sound?: PokemonToSoundResolver<TParent>;
  isFavorite?: PokemonToIsFavoriteResolver<TParent>;
}

export interface PokemonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToWeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToClassificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToResistantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToAttacksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToWeaknessesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToFleeRateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToMaxCPResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToEvolutionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToEvolutionRequirementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToMaxHPResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToSoundResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonToIsFavoriteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPokemonConnectionTypeResolver<TParent = any> {
  limit?: PokemonConnectionToLimitResolver<TParent>;
  offset?: PokemonConnectionToOffsetResolver<TParent>;
  count?: PokemonConnectionToCountResolver<TParent>;
  edges?: PokemonConnectionToEdgesResolver<TParent>;
}

export interface PokemonConnectionToLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonConnectionToOffsetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonConnectionToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPokemonAttackTypeResolver<TParent = any> {
  fast?: PokemonAttackToFastResolver<TParent>;
  special?: PokemonAttackToSpecialResolver<TParent>;
}

export interface PokemonAttackToFastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonAttackToSpecialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPokemonDimensionTypeResolver<TParent = any> {
  minimum?: PokemonDimensionToMinimumResolver<TParent>;
  maximum?: PokemonDimensionToMaximumResolver<TParent>;
}

export interface PokemonDimensionToMinimumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonDimensionToMaximumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPokemonEvolutionRequirementTypeResolver<TParent = any> {
  amount?: PokemonEvolutionRequirementToAmountResolver<TParent>;
  name?: PokemonEvolutionRequirementToNameResolver<TParent>;
}

export interface PokemonEvolutionRequirementToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PokemonEvolutionRequirementToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryTypeResolver<TParent = any> {
  pokemons?: QueryToPokemonsResolver<TParent>;
  pokemonByName?: QueryToPokemonByNameResolver<TParent>;
  pokemonById?: QueryToPokemonByIdResolver<TParent>;
  pokemonTypes?: QueryToPokemonTypesResolver<TParent>;
}

export interface QueryToPokemonsArgs {
  query: GQLPokemonsQueryInput;
}
export interface QueryToPokemonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPokemonsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPokemonByNameArgs {
  name: string;
}
export interface QueryToPokemonByNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPokemonByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPokemonByIdArgs {
  id: string;
}
export interface QueryToPokemonByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPokemonByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPokemonTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  favoritePokemon?: MutationToFavoritePokemonResolver<TParent>;
  unFavoritePokemon?: MutationToUnFavoritePokemonResolver<TParent>;
}

export interface MutationToFavoritePokemonArgs {
  id: string;
}
export interface MutationToFavoritePokemonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFavoritePokemonArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnFavoritePokemonArgs {
  id: string;
}
export interface MutationToUnFavoritePokemonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnFavoritePokemonArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRootTypeResolver<TParent = any> {
  query?: RootToQueryResolver<TParent>;
}

export interface RootToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
